CC=avr-gcc
AS=$(CC)
LD=$(CC)

CPU=atmega168
AVRDUDE=avrdude -p m168 -P usb -c avrispmkII
CFLAGS=-Wall -mmcu=$(CPU) -Os -DF_CPU=8000000L
LDFLAGS=-mmcu=$(CPU) -Wl,-Map=mapfile.map

OBJS=snes2ps.o
PROG=snes2ps-m168

EFUSE=0x01

# RSTDISBL  DWEN   SPIEN  WDTON  EESAVE  BODLEVEL2  BODLEVEL1  BODLEVEL0
#    1        1      0      1      1        1        1        1
HFUSE=0xDF

# CKDIV8   CKOUT   SUT1  SUT0  CKSEL3  CKSEL2  CKSEL1  CKSEL0
#    1        1      1    0      0       0       1       0
#
# Note: Uses internal 8MHz RC Oscillator
LFUSE=0xE2

all: $(PROG).hex

clean:
	rm -f $(PROG).elf $(PROG).hex $(PROG).map $(OBJS)

$(PROG).elf: $(OBJS)
	$(LD) $(OBJS) $(LDFLAGS) -o $(PROG).elf

$(PROG).hex: $(PROG).elf
	avr-objcopy -j .data -j .text -O ihex $(PROG).elf $(PROG).hex
	avr-size $(PROG).elf

flash: $(PROG).hex
	$(AVRDUDE) -Uflash:w:$< -B 5.0 -e

fuse:
	$(AVRDUDE) -e -Uefuse:w:$(EFUSE):m -Uhfuse:w:$(HFUSE):m -Ulfuse:w:$(LFUSE):m -B 20.0 -F

erase:
	$(AVRDUDE) -B 10.0 -e

reset:
	$(AVRDUDE) -B 10.0

%.o: %.S
	$(CC) $(CFLAGS) -c $<

%.o: %.c
	$(CC) $(CFLAGS) -c $<

%.o: %.c %.h
	$(CC) $(CFLAGS) -c $<
